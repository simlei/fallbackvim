echo "BOOTSTRAP: start bootstrap sequence"
if ! exists('g:_vim_instance')

    let g:_vim_instance={}
    let g:_vim_instance.cmd = "/home/snuc/sandbox/installations/HEADvim_local/bin/vim"

    let g:_vim_instance.orig_VIMRUNTIME = $VIMRUNTIME
    let g:_vim_instance.orig_VIM = $VIM

    let vimruntime={}
    let vimruntime.logfile = expand('<sfile>:p:h') . '/vimruntime.log'
    let vimruntime.stock_vim_init={}
    let vimruntime.stock_vim_init.scriptfile = expand('<sfile>:p')

    let vimruntime.stock_vim_init.vimrc_spec = {}
    let vimruntime.stock_vim_init.vimrc_spec.rc = []
    let vimruntime.stock_vim_init.gvimrc_spec = {}
    let vimruntime.stock_vim_init.gvimrc_spec.rc = []

    command! -bar -nargs=1 AddRcVim  call add(vimruntime.stock_vim_init.vimrc_spec.rc, <q-args>)

    let vimruntime.stock_vim_init.newRTPList = []
    let vimruntime.stock_vim_init.newPPList = []

    fun! _KeepPathPart(part, pathname) abort
        let p = expand(a:part)
        let matchesVIMRUNTIME = 0
        let matchesHOMEVIM = 0
        let tomatchHOMEVIM = fnamemodify(expand("$HOME")."/.vim", ':p:h')
        let tomatchVIMRUNTIME = fnamemodify(expand("$VIMRUNTIME"), ':p:h:h')
        let exists=0
        " echom "looking if ".p." matches ".tomatchHOMEVIM
        if stridx(p, tomatchHOMEVIM) == 0
            let matchesHOMEVIM=1
            " echom "matched HOMEVIM!"
        endif
        " echom "looking if ".p." matches ".tomatchVIMRUNTIME
        if stridx(p, tomatchVIMRUNTIME) == 0
            let matchesVIMRUNTIME=1
            " echom "matched VIMRUNTIME!"
        endif
        if isdirectory(p)
            let exists = 1
            " echom "exists!"
        endif
        " if stridx(p, substitute(expand("$VIMRUNTIME"), expand("$HOME"), '~', '')) == 0
        "     let matchesVIMRUNTIME=1
        " endif
        if ! matchesHOMEVIM && exists
            return 1
        else
            return 0
        endif
    endf
    for p in split(&runtimepath, ",")
        " echom '#### '.p
        if _KeepPathPart(p, 'runtimepath')
            call add(vimruntime.stock_vim_init.newRTPList, p)
        endif
    endfor
    for p in split(&packpath, ",")
        if _KeepPathPart(p, 'packpath')
            call add(vimruntime.stock_vim_init.newPPList, p)
        endif
    endfor

    let &runtimepath = join(vimruntime.stock_vim_init.newRTPList, ",")
    let &packpath = join(vimruntime.stock_vim_init.newPPList, ",")

    fun! _PathSettingPrepend(setting, part) abort
        " echom printf("DBG: _PathSettingPrepend('%s', '%s')", string(a:setting), string(a:part))
        if a:setting ==# "runtimepath" || a:setting ==# "rtp"
		let oldsetting = &runtimepath
		let &runtimepath=a:part.",".oldsetting
		echom printf("DBG: adding RTP: " . a:part)
	elseif a:setting ==# "packpath" || a:setting ==# "pp"
		echom printf("DBG: adding PP: " . a:part)
		let oldsetting = &packpath
		let &packpath=a:part.",".oldsetting
	else
		echoe "unknown setting: ".a:setting
        endif

        " exec printf('set %s^=%s', a:setting, a:part)
    endf

    command! -nargs=+ -bar PathAddPP call _PathSettingPrepend("packpath", _cmdPath(<f-args>))
    command! -nargs=+ -bar PathAddRTP call _PathSettingPrepend("runtimepath", _cmdPath(<f-args>))

    fun! _cmdPath(...) abort
        let args=[]
        for a in a:000
            if match(a, '^[s]:') > -1
                throw "script-level variables are not supported in _cmdPath commands"
            elseif match(a, '^[glab]:') > -1
                call add(args, eval(a))
            else
                call add(args, a)
            endif
        endfor
        return join(args, "/")
    endf

endif

" echo "BOOTSTRAP: end bootstrap sequence"
